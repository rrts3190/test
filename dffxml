import org.xmlunit.builder.DiffBuilder;
import org.xmlunit.builder.Input;
import org.xmlunit.diff.Diff;
import org.xmlunit.diff.Difference;
import org.xmlunit.diff.DifferenceEvaluator;
import org.xmlunit.diff.DefaultNodeMatcher;
import org.xmlunit.diff.ElementSelectors;
import org.xmlunit.diff.NodeMatcher;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

public class XmlDifferenceWithIgnoreTags {

    public static void main(String[] args) {
        File xmlFile1 = new File("file1.xml");
        File xmlFile2 = new File("file2.xml");

        // Define tags to ignore during comparison
        String[] ignoreTags = {"ignore"};

        // Create custom DifferenceEvaluator to ignore specified tags
        DifferenceEvaluator ignoreTagsEvaluator = new IgnoreTagsDifferenceEvaluator(ignoreTags);

        // Perform XML comparison
        Diff xmlDiff = DiffBuilder.compare(Input.fromFile(xmlFile1))
                .withTest(Input.fromFile(xmlFile2))
                .withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText))
                .withDifferenceEvaluator(ignoreTagsEvaluator)
                .build();

        // Output differences to CSV
        outputDifferencesToCSV(xmlDiff);
    }

    // Custom DifferenceEvaluator to ignore specified tags
    private static class IgnoreTagsDifferenceEvaluator implements DifferenceEvaluator {
        private String[] tagsToIgnore;

        public IgnoreTagsDifferenceEvaluator(String[] tagsToIgnore) {
            this.tagsToIgnore = tagsToIgnore;
        }

        @Override
        public ComparisonResult evaluate(Comparison comparison, ComparisonResult outcome) {
            for (String tag : tagsToIgnore) {
                if (comparison.getControlDetails().getTarget().getNodeName().equalsIgnoreCase(tag) ||
                        comparison.getControlDetails().getParent().getNodeName().equalsIgnoreCase(tag)) {
                    return ComparisonResult.SIMILAR;
                }
            }
            return outcome;
        }
    }

    // Output differences to CSV
    private static void outputDifferencesToCSV(Diff xmlDiff) {
        try (FileWriter csvWriter = new FileWriter("differences.csv")) {
            csvWriter.append("Filename, XPath, FirstFileValue, SecondFileValue\n");

            for (Difference difference : xmlDiff.getDifferences()) {
                String filename = difference.getComparison().getControlDetails().getTarget().getDocumentURI();
                String xPath = difference.getComparison().getControlDetails().getXPath();
                String firstFileValue = difference.getComparison().getControlDetails().getValue();
                String secondFileValue = difference.getComparison().getTestDetails().getValue();

                csvWriter.append(String.format("%s, %s, %s, %s\n", filename, xPath, firstFileValue, secondFileValue));
            }
            System.out.println("Differences written to differences.csv");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
